// Parameters concerning P783

#ifndef SSEC_PARAMETERS_P783_H
#define SSEC_PARAMETERS_P783_H

#define FIELD_NAME			"p783"
#define FIELD_BITS			783
#define FIELD_BYTES			98
#define FIELD_64BITS_WORDS	13
#define QFIELD_BYTES		196
#define MASK_FIELD_ELEMENT	0x7fff
#define SECURITY_BITS		256

#define BIT_LENGTH_PATH		512
#define TRITLENGTH_PATH		324

// Field characteristic p
static const uint64_t FIELD_CHARACTERISTIC[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x66BF
};

// Neutral multiplicative in Montgomery domain: R = 2ᵉ mod p
static const uint64_t MONTGOMERY_CONSTANT_ONE[FIELD_64BITS_WORDS] = {
	0x27DD1E854B5E0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x5800
};

// Montgomery constant R² = (2ᵉ)² mod p where e = 0 mod 64 s.t. 2ᵉ⁻⁶⁴ < p < 2ᵉ
static const uint64_t MONTGOMERY_CONSTANT_R_SQUARED[FIELD_64BITS_WORDS] = {
	0x3C1D8A4765304213, 0xDD1E8551932BFE55, 0xD1E854B5E0DB4027, 0x1E854B5E0DB4027D,
	0xE854B5E0DB4027DD, 0x854B5E0DB4027DD1, 0x54B5E0DB4027DD1E, 0x4B5E0DB4027DD1E8,
	0xB5E0DB4027DD1E85, 0x5E0DB4027DD1E854, 0xE0DB4027DD1E854B, 0xDB4027DD1E854B5,
	0x2B1E
};

// Exponent constant required for field inversion: p - 2
static const uint64_t FIELD_INVERSION_EXPONENT[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x66BF
};

// Exponent constant required for computing square-roots in GF(p): (p - 1) / 2
static const uint64_t SQUARE_ROOT_EXPONENT_12[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x335F
};

// Exponent constant required for computing square-roots in GF(p²): (p - 3) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_34[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x19AF
};

// Exponent constant required for computing square-roots in GF(p²): (p + 1) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_14[FIELD_64BITS_WORDS] = {
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x19B0
};

#define SSEC_CUBE_ROOT_OVER_FP
// Exponent constant required for computing square-roots in GF(p): (2p - 1) / 3
static const uint64_t CUBE_ROOT_EXPONENT_213[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x447F
};

// Exponent constant required for computing cube-roots
#define CUBE_ROOT_EXPONENT_BITS			1563
static const uint64_t CUBE_ROOT_EXPONENT[2 * FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAB, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xFFFFFFFFFFFFE92A, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x4950FFF
};

// Cube root of unity in Montgomery domain
static const uint64_t CUBE_ROOT_OF_UNITY[2 * FIELD_64BITS_WORDS] = {
	0xFFFEC1170BD5A50F, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x3ABF,
	0x1C407E8743525DF3, 0x8389CD840B2C8571, 0x1DABECCB752AD092, 0x9708FD22DCC5310A,
	0x399BDB996039C9A0, 0x6B54626ABA902AE9, 0x74FBD0223EF9E4B5, 0xA351AF829E66C06,
	0xF526A07670786493, 0x6F0C9D1B1A174D44, 0xC7A3A0F6ED9D8D5, 0x6DFAA978D37CA9C0,
	0xB6E
};

static const uint64_t ONE_HALF[FIELD_64BITS_WORDS] = {
        0x00013EE8F42A5AF0, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000002C00
};
static const uint64_t ONE_THIRD[FIELD_64BITS_WORDS] = {
	0x555629F0A2C6E74A, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555,
	0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555,
	0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555,
	0x61D5
};

static const uint64_t ONE_NINTH[FIELD_64BITS_WORDS] = {
	0xC71CB8A58B97A26E, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0xC71C71C71C71C71C,
	0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0xC71C71C71C71C71C, 0x1C71C71C71C71C71,
	0x71C71C71C71C71C7, 0xC71C71C71C71C71C, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7,
	0x209C
};

static const uint64_t ONE_BY_27[FIELD_64BITS_WORDS] = {
	0x425EE8372E87E0CF, 0x5ED097B425ED097B, 0xD097B425ED097B42, 0x97B425ED097B425E,
	0xB425ED097B425ED0, 0x25ED097B425ED097, 0xED097B425ED097B4, 0x97B425ED097B425,
	0x7B425ED097B425ED, 0x425ED097B425ED09, 0x5ED097B425ED097B, 0xD097B425ED097B42,
	0x2D1E
};

#endif // SSEC_PARAMETERS_P783_H
