// Parameters concerning P765

#ifndef SSEC_PARAMETERS_P765_H
#define SSEC_PARAMETERS_P765_H

#define FIELD_NAME			"p765"
#define FIELD_BITS			765
#define FIELD_BYTES			96
#define FIELD_64BITS_WORDS	12
#define QFIELD_BYTES		192
#define MASK_FIELD_ELEMENT	0x1fffffffffffffff
#define SECURITY_BITS		256

#define BIT_LENGTH_PATH		512
#define TRITLENGTH_PATH		324

// Field characteristic p
static const uint64_t FIELD_CHARACTERISTIC[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x100FFFFFFFFFFFFF
};

// Neutral multiplicative in Montgomery domain: R = 2ᵉ mod p
static const uint64_t MONTGOMERY_CONSTANT_ONE[FIELD_64BITS_WORDS] = {
	0xF, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0xF10000000000000
};

// Montgomery constant R² = (2ᵉ)² mod p where e = 0 mod 64 s.t. 2ᵉ⁻⁶⁴ < p < 2ᵉ
static const uint64_t MONTGOMERY_CONSTANT_R_SQUARED[FIELD_64BITS_WORDS] = {
	0xF00FF00FF00FF10D, 0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F,
	0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F,
	0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F, 0xF00FF00FF00FF00F, 0xF3FF00FF00FF00F
};

// Exponent constant required for field inversion: p - 2
static const uint64_t FIELD_INVERSION_EXPONENT[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x100FFFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p): (p - 1) / 2
static const uint64_t SQUARE_ROOT_EXPONENT_12[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x807FFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p²): (p - 3) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_34[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x403FFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p²): (p + 1) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_14[FIELD_64BITS_WORDS] = {
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x404000000000000
};

// Exponent constant required for computing cube-roots
#define CUBE_ROOT_EXPONENT_BITS			1525
static const uint64_t CUBE_ROOT_EXPONENT[2 * FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAB, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xC38AAAAAAAAAAAAA,
	0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0xC71C71C71C71C71C, 0x1C71C71C71C71C71,
	0x71C71C71C71C71C7, 0xC71C71C71C71C71C, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7,
	0xC71C71C71C71C71C, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0x1CAAC71C71C71C
};

// Cube root of unity in Montgomery domain
static const uint64_t CUBE_ROOT_OF_UNITY[2 * FIELD_64BITS_WORDS] = {
	0x45EDE07E28715417, 0xF6DB2CA3677B8DDB, 0x88AFD974F168C4B1, 0xC8DEDD280AB92378,
	0xDCD9AE3275DA252F, 0x2A12F735CD66DE9, 0x77D56656CE5717F1, 0xEA427949FCFD35BA,
	0x9B2BD2E22AE75562, 0x79A64664D8C53739, 0x3601293C94767A21, 0x6CDE7AD807576A6,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0
};

static const uint64_t ONE_HALF[FIELD_64BITS_WORDS] = {
        0x0000000000000007, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0F90000000000000
};
static const uint64_t ONE_THIRD[FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAF, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xFBAAAAAAAAAAAAA
};

static const uint64_t ONE_NINTH[FIELD_64BITS_WORDS] = {
	0xE38E38E38E38E38F, 0x8E38E38E38E38E38, 0x38E38E38E38E38E3, 0xE38E38E38E38E38E,
	0x8E38E38E38E38E38, 0x38E38E38E38E38E3, 0xE38E38E38E38E38E, 0x8E38E38E38E38E38,
	0x38E38E38E38E38E3, 0xE38E38E38E38E38E, 0x8E38E38E38E38E38, 0xFF38E38E38E38E3
};

static const uint64_t ONE_BY_27[FIELD_64BITS_WORDS] = {
	0x4BDA12F684BDA12F, 0xDA12F684BDA12F68, 0x12F684BDA12F684B, 0xF684BDA12F684BDA,
	0x84BDA12F684BDA12, 0xBDA12F684BDA12F6, 0xA12F684BDA12F684, 0x2F684BDA12F684BD,
	0x684BDA12F684BDA1, 0x4BDA12F684BDA12F, 0xDA12F684BDA12F68, 0x100684BDA12F684B
};

#endif // SSEC_PARAMETERS_P765_H
