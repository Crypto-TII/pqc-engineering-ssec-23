// Parameters concerning P398

#ifndef SSEC_PARAMETERS_P398_H
#define SSEC_PARAMETERS_P398_H

#define FIELD_NAME			"p398"
#define FIELD_BITS			398
#define FIELD_BYTES			50
#define FIELD_64BITS_WORDS	7
#define QFIELD_BYTES		100
#define MASK_FIELD_ELEMENT	0x3fff
#define SECURITY_BITS		128

#define BIT_LENGTH_PATH		256
#define TRITLENGTH_PATH		162

// Field characteristic p
static const uint64_t FIELD_CHARACTERISTIC[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x293F
};

// Neutral multiplicative in Montgomery domain: R = 2ᵉ mod p
static const uint64_t MONTGOMERY_CONSTANT_ONE[FIELD_64BITS_WORDS] = {
	0x634C0634C0634, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x1F00
};

// Montgomery constant R² = (2ᵉ)² mod p where e = 0 mod 64 s.t. 2ᵉ⁻⁶⁴ < p < 2ᵉ
static const uint64_t MONTGOMERY_CONSTANT_R_SQUARED[FIELD_64BITS_WORDS] = {
	0x4BC065B4446AC827, 0xC0634C2CB8A3C3C8, 0x4C0634C0634C0634, 0x34C0634C0634C063,
	0x634C0634C0634C06, 0x634C0634C0634C0, 0x1A8C
};

// Exponent constant required for field inversion: p - 2
static const uint64_t FIELD_INVERSION_EXPONENT[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x293F
};

// Exponent constant required for computing square-roots in GF(p): (p - 1) / 2
static const uint64_t SQUARE_ROOT_EXPONENT_12[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x149F
};

// Exponent constant required for computing square-roots in GF(p²): (p - 3) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_34[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xA4F
};

// Exponent constant required for computing square-roots in GF(p²): (p + 1) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_14[FIELD_64BITS_WORDS] = {
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0xA50
};

#define SSEC_CUBE_ROOT_OVER_FP
// Exponent constant required for computing square-roots in GF(p): (2p - 1) / 3
static const uint64_t CUBE_ROOT_EXPONENT_213[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x1B7F
};

// Exponent constant required for computing cube-roots
#define CUBE_ROOT_EXPONENT_BITS			793
static const uint64_t CUBE_ROOT_EXPONENT[2 * FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAB, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFEDAA, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x17A1FFF
};

// Cube root of unity in Montgomery domain
static const uint64_t CUBE_ROOT_OF_UNITY[2 * FIELD_64BITS_WORDS] = {
	0xFFFCE59FCE59FCE5, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x19BF,
	0x6CE379152F9FF32A, 0xE220D2AF50A7D248, 0x8EF4F44AC29E6029, 0x721AA2B4D209DC46,
	0xF004DE5678BE4AE6, 0xF07C504EA828D961, 0x15D
};

static const uint64_t ONE_HALF[FIELD_64BITS_WORDS] = {
        0x00031A6031A6031A, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000F80
};
static const uint64_t ONE_THIRD[FIELD_64BITS_WORDS] = {
	0x555766EACBC40211, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555,
	0x5555555555555555, 0x5555555555555555, 0x1815
};

static const uint64_t ONE_NINTH[FIELD_64BITS_WORDS] = {
	0x71C7CCF8EE96AB5B, 0xC71C71C71C71C71C, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7,
	0xC71C71C71C71C71C, 0x1C71C71C71C71C71, 0x807
};

static const uint64_t ONE_BY_27[FIELD_64BITS_WORDS] = {
	0xD097EEFDA4DCE3C9, 0x97B425ED097B425E, 0xB425ED097B425ED0, 0x25ED097B425ED097,
	0xED097B425ED097B4, 0x97B425ED097B425, 0x2AD
};

#endif // SSEC_PARAMETERS_P398_H
