// Parameters concerning P575

#ifndef SSEC_PARAMETERS_P575_H
#define SSEC_PARAMETERS_P575_H

#define FIELD_NAME			"p575"
#define FIELD_BITS			575
#define FIELD_BYTES			72
#define FIELD_64BITS_WORDS	9
#define QFIELD_BYTES		144
#define MASK_FIELD_ELEMENT	0x7fffffffffffffff
#define SECURITY_BITS		192

#define BIT_LENGTH_PATH		384
#define TRITLENGTH_PATH		243

// Field characteristic p
static const uint64_t FIELD_CHARACTERISTIC[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x457FFFFFFFFFFFFF
};

// Neutral multiplicative in Montgomery domain: R = 2ᵉ mod p
static const uint64_t MONTGOMERY_CONSTANT_ONE[FIELD_64BITS_WORDS] = {
	0x3, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x2F80000000000000
};

// Montgomery constant R² = (2ᵉ)² mod p where e = 0 mod 64 s.t. 2ᵉ⁻⁶⁴ < p < 2ᵉ
static const uint64_t MONTGOMERY_CONSTANT_R_SQUARED[FIELD_64BITS_WORDS] = {
	0x1F4F31BA03AEF6D8, 0x1619C8BF8A2126AD, 0x3CC6E80EBBDB2A5C, 0x6722FE28849AB47D,
	0x1BA03AEF6CA97058, 0x8BF8A2126AD1F4F3, 0x80EBBDB2A5C1619C, 0xE28849AB47D3CC6E,
	0xAF6CA970586722F
};

// Exponent constant required for field inversion: p - 2
static const uint64_t FIELD_INVERSION_EXPONENT[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x457FFFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p): (p - 1) / 2
static const uint64_t SQUARE_ROOT_EXPONENT_12[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x22BFFFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p²): (p - 3) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_34[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0x115FFFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p²): (p + 1) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_14[FIELD_64BITS_WORDS] = {
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x1160000000000000
};

// Exponent constant required for computing cube-roots
#define CUBE_ROOT_EXPONENT_BITS			1146
static const uint64_t CUBE_ROOT_EXPONENT[2 * FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAB, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xB7AAAAAAAAAAAAAA, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0xC71C71C71C71C71C,
	0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0xC71C71C71C71C71C, 0x1C71C71C71C71C71,
	0x71C71C71C71C71C7, 0x218B1C71C71C71C
};

// Cube root of unity in Montgomery domain
static const uint64_t CUBE_ROOT_OF_UNITY[2 * FIELD_64BITS_WORDS] = {
	0xC2876D37FD3EDC6D, 0x216F79A07CD5EFCB, 0x5289BBCF651128A1, 0x41BDB1B4B36CE022,
	0xA0A0431D1B04D532, 0xB970C4702C1679BE, 0x79FE2A81F3240321, 0x7CE2986BFB04AC36,
	0x438A6DC1FDE98197,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0,
	0x0
};

static const uint64_t ONE_HALF[FIELD_64BITS_WORDS] = {
        0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x3A80000000000000
};

static const uint64_t ONE_THIRD[FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAB, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0x3E2AAAAAAAAAAAAA
};

static const uint64_t ONE_NINTH[FIELD_64BITS_WORDS] = {
	0xE38E38E38E38E38E, 0x8E38E38E38E38E38, 0x38E38E38E38E38E3, 0xE38E38E38E38E38E,
	0x8E38E38E38E38E38, 0x38E38E38E38E38E3, 0xE38E38E38E38E38E, 0x8E38E38E38E38E38,
	0x2BE38E38E38E38E3
};

static const uint64_t ONE_BY_27[FIELD_64BITS_WORDS] = {
	0x4BDA12F684BDA12F, 0xDA12F684BDA12F68, 0x12F684BDA12F684B, 0xF684BDA12F684BDA,
	0x84BDA12F684BDA12, 0xBDA12F684BDA12F6, 0xA12F684BDA12F684, 0x2F684BDA12F684BD,
	0x25CBDA12F684BDA1
};

#endif // SSEC_PARAMETERS_P575_H
