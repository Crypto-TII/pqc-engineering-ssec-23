// Parameters concerning P381

#ifndef SSEC_PARAMETERS_P381_H
#define SSEC_PARAMETERS_P381_H

#define FIELD_NAME			"p381"
#define FIELD_BITS			381
#define FIELD_BYTES			48
#define FIELD_64BITS_WORDS	6
#define QFIELD_BYTES		96
#define MASK_FIELD_ELEMENT	0x1fffffffffffffff
#define SECURITY_BITS		128

#define BIT_LENGTH_PATH		256
#define TRITLENGTH_PATH		162

// Field characteristic p
static const uint64_t FIELD_CHARACTERISTIC[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0x1B4FFFFFFFFFFFFF
};

// Neutral multiplicative in Montgomery domain: R = 2ᵉ mod p
static const uint64_t MONTGOMERY_CONSTANT_ONE[FIELD_64BITS_WORDS] = {
	0x9, 0x0, 0x0, 0x0,
	0x0, 0xA30000000000000
};

// Montgomery constant R² = (2ᵉ)² mod p where e = 0 mod 64 s.t. 2ᵉ⁻⁶⁴ < p < 2ᵉ
static const uint64_t MONTGOMERY_CONSTANT_R_SQUARED[FIELD_64BITS_WORDS] = {
	0x532F7367B0545BBA, 0x24520383CECAB0EA, 0x257DF31CB46E21FA, 0xCBDCD9EC1516D8C0,
	0x1480E0F3B2AC3A94, 0x175CC72D1B887E89
};

// Exponent constant required for field inversion: p - 2
static const uint64_t FIELD_INVERSION_EXPONENT[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0x1B4FFFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p): (p - 1) / 2
static const uint64_t SQUARE_ROOT_EXPONENT_12[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0xDA7FFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p²): (p - 3) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_34[FIELD_64BITS_WORDS] = {
	0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF,
	0xFFFFFFFFFFFFFFFF, 0x6D3FFFFFFFFFFFF
};

// Exponent constant required for computing square-roots in GF(p²): (p + 1) / 4
static const uint64_t SQUARE_ROOT_EXPONENT_14[FIELD_64BITS_WORDS] = {
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x6D4000000000000
};

// Exponent constant required for computing cube-roots
#define CUBE_ROOT_EXPONENT_BITS			759
static const uint64_t CUBE_ROOT_EXPONENT[2 * FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAB, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0xC10AAAAAAAAAAAAA, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7,
	0xC71C71C71C71C71C, 0x1C71C71C71C71C71, 0x71C71C71C71C71C7, 0x52E2C71C71C71C
};

// Cube root of unity in Montgomery domain
static const uint64_t CUBE_ROOT_OF_UNITY[2 * FIELD_64BITS_WORDS] = {
	0x1BB300CBD0A722C2, 0x59ABE44B6FF03705, 0xC41B638670BF865C, 0xB69DC6E7ADB4D493,
	0x8FEC0647B44AD5A9, 0xF626F6109289C5E,
	0x0, 0x0, 0x0, 0x0,
	0x0, 0x0
};

static const uint64_t ONE_HALF[FIELD_64BITS_WORDS] = {
        0x0000000000000004, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
        0x0000000000000000, 0x12C0000000000000
};
static const uint64_t ONE_THIRD[FIELD_64BITS_WORDS] = {
	0xAAAAAAAAAAAAAAAD, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA,
	0xAAAAAAAAAAAAAAAA, 0x159AAAAAAAAAAAAA
};

static const uint64_t ONE_NINTH[FIELD_64BITS_WORDS] = {
	0xE38E38E38E38E38F, 0x8E38E38E38E38E38, 0x38E38E38E38E38E3, 0xE38E38E38E38E38E,
	0x8E38E38E38E38E38, 0x7338E38E38E38E3
};

static const uint64_t ONE_BY_27[FIELD_64BITS_WORDS] = {
	0xA12F684BDA12F685, 0x2F684BDA12F684BD, 0x684BDA12F684BDA1, 0x4BDA12F684BDA12F,
	0xDA12F684BDA12F68, 0x26684BDA12F684B
};

#endif // SSEC_PARAMETERS_P381_H
